spring.application.name = checkout-service
server.port=8083

spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service

spring.config.import=optional:configserver:

eureka.instance.hostname=localhost


# Propiedades para habilitar el uso de Eureka como discovery client
# eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
# eureka.client.register-with-eureka=true
# eureka.client.fetch-registry=true

# Configuración del servicio Feign para el balanceador de carga
# spring.cloud.loadbalancer.clients.name=products-service
loadbalancer.client.name=products-service
# spring.cloud.loadbalancer.configurations=weighted

spring.security.oauth2.resourceserver.jwt.issuer-uri= http://localhost:9090/realms/test

# Configuración del circuit breaker
#product seria el nombre del circuit breaker para el microservicio de productos
#si checkout se comunica con otro microservicio, se debe agregar una configuracion similar con otro nombre

#estas primeras 2 propiedades son para que se registre un health indicator en el actuator
resilience4j.circuitbreaker.instances.product.allow-health-indicator-to-fail=false 
#este es el comando para cambiar el estatus que vemos en el dashboard de eureka
resilience4j.circuitbreaker.instances.product.register-health-indicator=true
#con esta linea podemos apuntar a un endpoint especifico para el health check



#con estos 3 parametros defino el cambio de un estado a otro
resilience4j.circuitbreaker.instances.product.sliding-window-type=COUNT_BASED
#aca le decimos que para que se haga un analisis vamos a esperar que se den cierta cantidad de eventos
resilience4j.circuitbreaker.instances.product.sliding-window-size=5
#esta es la cantidad de eventos a esperar que sucedan
resilience4j.circuitbreaker.instances.product.failure-rate-threshold=50
#con esto le digo que si fallo el 50% de los intentos, se abra el circuito



#estos refieren a cuando el circuito esta abierto

resilience4j.circuitbreaker.instances.product.wait-duration-in-open-state=15000
#cuanto tiempo esperamos para pasar el circuito a half-open, en este caso son 15 segundos
resilience4j.circuitbreaker.instances.product.permitted-number-of-calls-in-half-open-state=3
#aca le decimos cuantos intentos vamos a hacer en half-open, en este caso 3, si de 3 intentos 2 fallan, se vuelve a abrir el circuito
resilience4j.circuitbreaker.instances.product.automatic-transition-from-open-to-half-open-enabled=true
#con esto le decimos que si se cumplen las condiciones, pase automaticamente a half-open, y ahi haga los 3 intentos

#con las siguientes lineas voy a implementar un retry, para que si el microservicio no responde, intente nuevamente de forma automatica
resilience4j.retry.instances.product.maxAttempts=3
#aca le digo cuantos intentos quiero hacer
resilience4j.retry.instances.product.waitDuration=500
#aca le digo cada cuanto quiero que intente, en este caso 500 milisegundos
resilience4j.retry.instances.product.retryExceptions[0]=feign.FeignException$InternalServerError
#aca le digo que excepciones quiero que intente, como retryExceptions es un arreglo por eso el [0]

#con esta linea le digo que quiero que se registre un health indicator en el actuator, previamente agregue la dependencia de actuator en el pom.xml
management.endpoints.web.exposure.include= health,info, circuitbreakers, circuitbreakerevents

#con esta linea le digo que quiero que se muestre info del circuit breaker en el endpoint de health
management.health.circuitbreakers.enabled = true

#aca le digo que muestre mas info cuando se consulta el endpoint de health
management.endpoint.health.show-details = always

#esta properties es para zipkin
management.tracing.sampling.probability = 1.0

logging.file.name=/Users/michaelrodriguez/springboot/logs/checkout-service.log